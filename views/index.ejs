<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/styles/output.css" rel="stylesheet" />

  <title>Product List</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f8f8f8;
      padding: 20px;
    }

    .cart {
      position: fixed;
      top: 10px;
      right: 20px;
      font-size: 24px;
      cursor: pointer;
      text-decoration: none;
      color: black;
    }

    .cart-badge {
      position: absolute;
      top: -5px;
      right: -10px;
      background-color: red;
      color: white;
      font-size: 14px;
      font-weight: bold;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .product-list {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }

    .product-card {
      border: 1px solid #ddd;
      padding: 10px;
      border-radius: 5px;
      text-align: center;
      width: 200px;
    }

    .product-card img {
      max-width: 100%;
      height: auto;
    }

    .product-card button {
      margin-top: 10px;
      padding: 10px 20px;
      background-color: #007BFF;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }

    .product-card button:hover {
      background-color: #0056b3;
    }
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background-color: black;
      color: white;
      padding: 15px;
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      display: flex;
      align-items: center;
      gap: 10px;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s, visibility 0.3s;
    }

    .notification.show {
      opacity: 1;
      visibility: visible;
    }

    .notification a {
      color: #00aaff;
      text-decoration: none;
    }

    .notification a:hover {
      text-decoration: underline;
    }

    .notification .close-notification {
      background: none;
      border: none;
      color: white;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>



  <%- include('partials/_header') %>

  <main>
    <!-- Hero  -->
    <section class="hero">
      <div class="img-section">
        <img src="/images/poster.png" alt="" />
      </div>

      <div class="text-section">
        <h1>Ge dina väggar en personlighet</h1>

        <p>
          Utforska vårt breda utbud av posters och prints som passar alla hem
          och stilar. Oavsett om du söker moderna motiv, klassiska konstverk
          eller inspirerande citat har vi något för dig. Kombinera dina
          favoriter och skapa en unik tavelvägg som lyfter hela rummet.
        </p>

        <button class="primary-button lg:self-start">Utforska våra posters</button>
      </div>
    </section>




 




  <div id="data-output"></div>
  <div class="notification" id="notification">
    <span id="notification-text"></span>
    <a href="/shoppingCart" id="view-cart">View Cart</a>
    <button class="close-notification" id="close-notification">×</button>
  </div>

<!-- -------------------------------------------SCRIPT --------------------------------- -->
  <script>

document.addEventListener("DOMContentLoaded", () => {
  const cartBadge = document.getElementById("cart-badge");
  const quantity = 1; // Default quantity
  const userId = 1; // Temporary user ID for testing
  const notification = document.getElementById("notification");
  const notificationText = document.getElementById("notification-text");
  const closeNotification = document.getElementById("close-notification");

  let cart = [];
  const cartAPI = "http://localhost:3000/cartAPI";

  // Charger le panier depuis le backend et synchroniser avec localStorage
  const syncCartWithBackend = async () => {
    try {
      const response = await fetch(cartAPI);
      const backendCart = await response.json();
      console.log("Réponse de l'API backend :", backendCart);
      cart = backendCart.map((item) => ({
        product_id: item.product_id,
        name: item.name,
        quantity: item.quantity,
      }));
      localStorage.setItem("cart", JSON.stringify(cart));
      updateCartBadge();
    } catch (error) {
      console.error("Erreur lors de la synchronisation du panier :", error);
    }
  };

  // Sauvegarder le panier dans localStorage
  const saveCartToLocalStorage = () => {
    localStorage.setItem("cart", JSON.stringify(cart));
  };

  // Mettre à jour le badge du panier
  const updateCartBadge = () => {
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartBadge.textContent = totalItems;
    cartBadge.style.display = totalItems > 0 ? "flex" : "none";
  };

  // Afficher une notification
  const showNotification = (productName) => {
    notificationText.textContent = `${productName} has been added to your cart!`;
    notification.classList.add("show");
    setTimeout(() => {
      notification.classList.remove("show");
    }, 5000);
  };

  // Ajouter un produit au panier
  const addToCart = (product) => {
    const existingProduct = cart.find((item) => item.product_id === product.id);

    if (existingProduct) {
      existingProduct.quantity += 1;
    } else {
      cart.push({ product_id: product.id, name: product.name, quantity: 1 });
    }

    saveCartToLocalStorage();

    fetch(cartAPI, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        product_id: product.id,
        user_id: userId,
        quantity: quantity,
        price: product.price,
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Erreur HTTP " + response.status);
        }
        return response.json();
      })
      .then((data) => console.log("Produit ajouté au backend :", data))
      .catch((err) => console.error("Erreur lors de l'ajout au backend :", err));

    showNotification(product.name);
    updateCartBadge();
  };

  // Récupération des produits
  fetch("http://localhost:3000/api/products")
    .then((resp) => resp.json())
    .then((data) => {
      const productCard = document.getElementById("data-output");

      productCard.innerHTML = 
       `
                  <h2>Nyheter</h2>
            <section class="product-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-[32px] w-full mb-8 px-8 py-12 md:px-20 max-w-screen-2xl mx-auto">
    
        <% products.filter(product => product.category === 'Nyheter').forEach(product => { %>
          <div class="produktkort flex flex-col items-center" data-id="<%= product.id %>">
            
            
            <div class="productgrid-container relative w-full">
              <a href="/products/<%= product.slugs %>" class="no-underline">
                <img src="<%= product.image %>" alt="Produktbild på tshirt" class="productimage w-full h-auto mb-[12px]">
              </a>
              </div>
              <div class="produktinfo w-full flex justify-between items-center text-black">
                <h2 class="text-sm font-semibold mb-[12px]"><%= product.name %></h2>
                <button class="add-to-cart-btn">BOUTON </button>
              </div>
              <span class="text-sm block"><%= product.price %> SEK</span>
          </div>
        <% }); %>
      </section>

      <h2>Vinter</h2>
      <section class="product-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-[32px] w-full mb-8 px-8 py-12 md:px-20 max-w-screen-2xl mx-auto">
    
        <% products.filter(product => product.category === 'Vinter').forEach(product => { %>
          <div class="produktkort flex flex-col items-center" data-id="<%= product.id %>">
            
            <div class="productgrid-container relative w-full">
              <a href="/products/<%= product.slugs %>"class="no-underline">
                <img src="<%= product.image %>" alt="Produktbild på tshirt" class="productimage w-full h-auto mb-[12px]">
                </a>
              </div>
              <div class="produktinfo w-full flex justify-between items-center text-black">
                <h2 class="text-sm font-semibold mb-[12px]"><%= product.name %></h2>
               <button class="add-to-cart-btn">BOUTON </button>
              </div>
              <span class="text-sm block"><%= product.price %> SEK</span>
          </div>
        <% }); %>
      </div>
      </section>
            `;
      

      productCard.addEventListener("click", (event) => {
        if (event.target && event.target.classList.contains("add-to-cart-btn")) {
          const productElement = event.target.closest(".produktkort");
          if (productElement) {
            const productName = productElement.querySelector("h2").textContent;
            const productPrice = productElement.querySelector("span").textContent;

            const product = {
              id: productElement.dataset.id,
              name: productName,
              price: parseFloat(productPrice.replace("SEK", "").trim()),
            };

            addToCart(product);
          }
        }
      });
    })
    .catch((error) => console.error("Erreur lors de la récupération des produits :", error));

  // Charger le panier et mettre à jour l'affichage
  syncCartWithBackend();

  // Fermer la notification manuellement
  closeNotification.addEventListener("click", () => {
    notification.classList.remove("show");
  });
});
  </script>
</body>
</html>