<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product List</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f8f8f8;
      padding: 20px;
    }

    .cart {
      position: fixed;
      top: 10px;
      right: 20px;
      font-size: 24px;
      cursor: pointer;
      text-decoration: none;
      color: black;
    }

    .cart-badge {
      position: absolute;
      top: -5px;
      right: -10px;
      background-color: red;
      color: white;
      font-size: 14px;
      font-weight: bold;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .product-list {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }

    .product-card {
      border: 1px solid #ddd;
      padding: 10px;
      border-radius: 5px;
      text-align: center;
      width: 200px;
    }

    .product-card img {
      max-width: 100%;
      height: auto;
    }

    .product-card button {
      margin-top: 10px;
      padding: 10px 20px;
      background-color: #007BFF;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }

    .product-card button:hover {
      background-color: #0056b3;
    }
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background-color: black;
      color: white;
      padding: 15px;
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      display: flex;
      align-items: center;
      gap: 10px;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s, visibility 0.3s;
    }

    .notification.show {
      opacity: 1;
      visibility: visible;
    }

    .notification a {
      color: #00aaff;
      text-decoration: none;
    }

    .notification a:hover {
      text-decoration: underline;
    }

    .notification .close-notification {
      background: none;
      border: none;
      color: white;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <a href="http://localhost:3000/cart" class="cart" id="cart">
    ðŸ›’
    <div class="cart-badge" id="cart-badge" style="display: none;">0</div>
  </a>

  <h1>Product List</h1>
  <div class="notification" id="notification">
    <span id="notification-text"></span>
    <a href="http://localhost:3000/cart/" id="view-cart">View Cart</a>
    <button class="close-notification" id="close-notification">Ã—</button>
  </div>

  <div class="product-list" id="product-list"></div>
  <!-- // tous les produits sont la -->

  <script>
 // RÃ©cupÃ©ration de l'ID utilisateur transmis par le backend
    const userId = "<%= userId %>"; // Assurez-vous que userId est correctement transmis
    console.log("ID utilisateur rÃ©cupÃ©rÃ© :", userId);

    // VÃ©rification de la connexion de l'utilisateur
    
    document.addEventListener("DOMContentLoaded", () => {
      const cartBadge = document.getElementById("cart-badge");
      const productList = document.getElementById("product-list");
      const notification = document.getElementById("notification");
      const notificationText = document.getElementById("notification-text");
      const closeNotification = document.getElementById("close-notification");
  
      let cart = [];
      const apiUrl = "http://localhost:3000/admin/cart";
  
      // Charger le panier depuis le backend et synchroniser avec localStorage
      const syncCartWithBackend = async () => {
        try {
          const response = await fetch(apiUrl);
          const backendCart = await response.json();
              console.log("RÃ©ponse de l'API backend :", backendCart); // Ajoutez ce log
          cart = backendCart.map(item => ({
            product_id: item.product_id,
            name: item.name,
            quantity: item.quantity,
          }));
          localStorage.setItem("cart", JSON.stringify(cart));
          updateCartBadge();
        } catch (error) {
          console.error("Erreur lors de la synchronisation du panier :", error);
        }
      };
      window.addEventListener("pageshow", (event) => {
  if (event.persisted) {
    // Si la page vient du cache, synchroniser le panier
    syncCartWithBackend();
  }
});
  
      // Sauvegarder le panier dans localStorage
      const saveCartToLocalStorage = () => {
        localStorage.setItem("cart", JSON.stringify(cart));
      };
  
      // Mettre Ã  jour le badge du panier
      const updateCartBadge = () => {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        cartBadge.textContent = totalItems;
        cartBadge.style.display = totalItems > 0 ? "flex" : "none";
      };
  
      // Afficher une notification
      const showNotification = (productName) => {
        notificationText.textContent = `${productName} has been added to your cart!`;
        notification.classList.add("show");
        setTimeout(() => {
          notification.classList.remove("show");
        }, 5000);
      };
  
      // Ajouter un produit au panier
      const addToCart = (product) => {
        const existingProduct = cart.find((item) => item.product_id === product.id);
  
        if (existingProduct) {
          // Si le produit existe, incrÃ©menter la quantitÃ©
          existingProduct.quantity += 1;
        } else {
          // Sinon, ajouter le produit avec une quantitÃ© initiale
          cart.push({ product_id: product.id, name: product.name, quantity: 1 });
        }
  
        // Sauvegarder dans localStorage
        saveCartToLocalStorage();
  
        // POST
        fetch(apiUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  product_id: product.id,
                  quantity: 1,
                  price: product.price,
                  user_id: userId, // VÃ©rifiez que userId n'est pas null ou undefined
                }),
})
  .then((response) => {
    if (!userId) {
  console.error("Erreur : userId est manquant !");
  return;
}
    if (!response.ok) {
      throw new Error("Erreur HTTP " + response.status);
    }
    return response.json();
  })
  .then((data) => console.log("Produit ajoutÃ© au backend :", data))
  .catch((err) => console.error("Erreur lors de l'ajout au backend :", err));
  
        // Mise Ã  jour de l'affichage
        showNotification(product.name);
        updateCartBadge();
      };
      
  
      // GET
      fetch("http://localhost:3000/admin/products")
        .then((resp) => resp.json())
        .then((data) => {
          data.forEach((product) => {
            const productCard = document.createElement("div");
            productCard.classList.add("product-card");
  
            productCard.innerHTML = `
              <img src="${product.image}" alt="${product.name}">
              <h3>${product.name}</h3>
              <p>${product.price} USD</p>
              <button class="add-to-cart-btn">Add to Cart</button>
            `;
  
            const addToCartButton = productCard.querySelector(".add-to-cart-btn");
            addToCartButton.addEventListener("click", () => {
              addToCart(product);
            });
  
            productList.appendChild(productCard);
          });
        })
        .catch((error) => console.error("Erreur lors de la rÃ©cupÃ©ration des produits :", error));
  
      // Charger le panier et mettre Ã  jour l'affichage
      syncCartWithBackend();
  
      // Fermer la notification manuellement
      closeNotification.addEventListener("click", () => {
        notification.classList.remove("show");
      });
    });

    
  </script>
</body>
</html>